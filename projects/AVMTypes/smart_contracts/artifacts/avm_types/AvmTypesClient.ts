/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AvmTypes","structs":{"innerStruct":[{"name":"num","type":"uint64"},{"name":"struct","type":"structAddressUint256"}],"structAddressUint256":[{"name":"address","type":"address"},{"name":"uint256","type":"uint256"}]},"methods":[{"name":"stringReadonly","args":[{"type":"string","name":"data"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"string","args":[{"type":"string","name":"data"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"stringArray","args":[{"type":"string[]","name":"data"}],"returns":{"type":"string[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"bytes","args":[{"type":"byte[]","name":"data"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"boolean","args":[{"type":"bool","name":"data"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"biguint","args":[{"type":"uint512","name":"data"}],"returns":{"type":"uint512"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"struct","args":[{"type":"(address,uint256)","struct":"structAddressUint256","name":"data"}],"returns":{"type":"(address,uint256)","struct":"structAddressUint256"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"innerStruct","args":[{"type":"(uint64,(address,uint256))","struct":"innerStruct","name":"data"}],"returns":{"type":"(uint64,(address,uint256))","struct":"innerStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"PaymentTxn","args":[{"type":"pay","name":"data"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"ApplicationCallTxn","args":[{"type":"appl","name":"data"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"AssetTransferTxn","args":[{"type":"axfer","name":"data"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"KeyRegistrationTxn","args":[{"type":"keyreg","name":"data"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"Transaction","args":[{"type":"txn","name":"data"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4StaticBytes8","args":[{"type":"byte[8]","name":"data"}],"returns":{"type":"byte[8]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4StaticBytes32","args":[{"type":"byte[32]","name":"data"}],"returns":{"type":"byte[32]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4StaticBytes1020","args":[{"type":"byte[1020]","name":"data"}],"returns":{"type":"byte[1020]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4DynamicBytes","args":[{"type":"byte[]","name":"data"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4Address","args":[{"type":"address","name":"data"}],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4Bool","args":[{"type":"bool","name":"data"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4Byte","args":[{"type":"byte","name":"data"}],"returns":{"type":"byte"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4DynamicArrayOfStruct","args":[{"type":"(address,uint256)[]","name":"data"}],"returns":{"type":"(address,uint256)[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4StaticArrayOf2Bytes","args":[{"type":"byte[2]","name":"data"}],"returns":{"type":"byte[2]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4StaticArrayOf2Structs","args":[{"type":"(address,uint256)[2]","name":"data"}],"returns":{"type":"(address,uint256)[2]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4UFixed8x16","args":[{"type":"ufixed8x16","name":"data"}],"returns":{"type":"ufixed8x16"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4UFixed512x160","args":[{"type":"ufixed512x160","name":"data"}],"returns":{"type":"ufixed512x160"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4UintN8","args":[{"type":"uint8","name":"data"}],"returns":{"type":"uint8"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4UintN512","args":[{"type":"uint512","name":"data"}],"returns":{"type":"uint512"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4UintN128Alias","args":[{"type":"uint128","name":"data"}],"returns":{"type":"uint128"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4UintN16Alias","args":[{"type":"uint16","name":"data"}],"returns":{"type":"uint16"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4UintN256Alias","args":[{"type":"uint256","name":"data"}],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4UintN64Alias","args":[{"type":"uint64","name":"data"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc4UintN8Alias","args":[{"type":"uint8","name":"data"}],"returns":{"type":"uint8"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[254,269,284,299,314,329,344,359,374,389,404,419,434,449,464,479,494,509,524,539,567,602,637,672,706,721,736,760,785,812,827,854],"errorMessage":"OnCompletion is not NoOp"},{"pc":[886],"errorMessage":"can only call when creating"},{"pc":[257,272,287,302,317,332,347,362,377,392,407,422,437,452,467,482,497,512,527,542,570,605,640,675,709,724,739,763,788,815,830,857],"errorMessage":"can only call when not creating"},{"pc":[747],"errorMessage":"overflow"},{"pc":[651],"errorMessage":"transaction type is appl"},{"pc":[616],"errorMessage":"transaction type is axfer"},{"pc":[581],"errorMessage":"transaction type is keyreg"},{"pc":[685],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAQBAJgEEFR98dTEbQQNcgiAEU/8sLgSREcS8BOXNgckEyCMP1wTkcOYIBIVR7zoEAwdLGQRyQLNmBKJ4+Y8Es3e+bQSkr47kBOMgvF4EvZEi+QS1zo4DBBaFOXQEQsW7jwSqWsHJBGTgCPAEqrvsgwQ2+eqtBDbSQUEEzmby6gRNSG6ZBGmbKhgEJY9zrARQ4mJ+BJJQuFYEKO4k0ATHxOhqBBtnpC4Ee4MpmATg2gcONhoAjiACWgI/AjACFQH8AeQB1QHGAaQBgQFeATsBHwEQAQEA8gDjANQAxQC2AKcAmACJAHoAawBcAE0APgAvACAAEQACI0MxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEMRYiCYgBc0kVFlcGAkxQKExQsCJDMRkURDEYRDEWIglJOBCBAhJEiAFISRUWVwYCTFAoTFCwIkMxGRREMRhEMRYiCUk4EIEEEkSIAR1JFRZXBgJMUChMULAiQzEZFEQxGEQxFiIJSTgQgQYSRIgA8kkVFlcGAkxQKExQsCJDMRkURDEYRDEWIglJOBAiEkSIAMhJFRZXBgJMUChMULAiQzEZFEQxGEQoNhoBULAiQzEZFEQxGEQoNhoBULAiQzEZFEQxGEQ2GgFJFSQORCSvqyhMULAiQzEZFEQxGEQ2GgEjU4ABACNPAlQoTFCwIkMxGRREMRhENhoBVwIASRUWVwYCTFAoTFCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhENhoBVwIASRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIASRUWVwYCTFAoTFCwIkMxGUD9hjEYFEQiQ4oBAYv/OBeJigEBi/84F4mKAQGL/zgXiYoBAYv/OBeJigEBi/84F4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type InnerStruct = {
  num: bigint,
  struct: StructAddressUint256
}


/**
 * Converts the ABI tuple representation of a innerStruct to the struct representation
 */
export function InnerStructFromTuple(abiTuple: [bigint, [string, bigint]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.innerStruct, APP_SPEC.structs) as InnerStruct
}

export type StructAddressUint256 = {
  address: string,
  uint256: bigint
}


/**
 * Converts the ABI tuple representation of a structAddressUint256 to the struct representation
 */
export function StructAddressUint256FromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.structAddressUint256, APP_SPEC.structs) as StructAddressUint256
}

/**
 * The argument types for the AvmTypes contract
 */
export type AvmTypesArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'stringReadonly(string)string': {
      data: string
    }
    'string(string)string': {
      data: string
    }
    'stringArray(string[])string[]': {
      data: string[]
    }
    'bytes(byte[])byte[]': {
      data: Uint8Array
    }
    'boolean(bool)bool': {
      data: boolean
    }
    'biguint(uint512)uint512': {
      data: bigint | number
    }
    'struct((address,uint256))(address,uint256)': {
      data: StructAddressUint256
    }
    'innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))': {
      data: InnerStruct
    }
    'PaymentTxn(pay)byte[]': {
      data: AppMethodCallTransactionArgument
    }
    'ApplicationCallTxn(appl)byte[]': {
      data: AppMethodCallTransactionArgument
    }
    'AssetTransferTxn(axfer)byte[]': {
      data: AppMethodCallTransactionArgument
    }
    'KeyRegistrationTxn(keyreg)byte[]': {
      data: AppMethodCallTransactionArgument
    }
    'Transaction(txn)byte[]': {
      data: AppMethodCallTransactionArgument
    }
    'arc4StaticBytes8(byte[8])byte[8]': {
      data: Uint8Array
    }
    'arc4StaticBytes32(byte[32])byte[32]': {
      data: Uint8Array
    }
    'arc4StaticBytes1020(byte[1020])byte[1020]': {
      data: Uint8Array
    }
    'arc4DynamicBytes(byte[])byte[]': {
      data: Uint8Array
    }
    'arc4Address(address)address': {
      data: string
    }
    'arc4Bool(bool)bool': {
      data: boolean
    }
    'arc4Byte(byte)byte': {
      data: number
    }
    'arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]': {
      data: [string, bigint | number][]
    }
    'arc4StaticArrayOf2Bytes(byte[2])byte[2]': {
      data: Uint8Array
    }
    'arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]': {
      data: [[string, bigint | number], [string, bigint | number]]
    }
    'arc4UFixed8x16(ufixed8x16)ufixed8x16': {
      data: number
    }
    'arc4UFixed512x160(ufixed512x160)ufixed512x160': {
      data: number
    }
    'arc4UintN8(uint8)uint8': {
      data: bigint | number
    }
    'arc4UintN512(uint512)uint512': {
      data: bigint | number
    }
    'arc4UintN128Alias(uint128)uint128': {
      data: bigint | number
    }
    'arc4UintN16Alias(uint16)uint16': {
      data: bigint | number
    }
    'arc4UintN256Alias(uint256)uint256': {
      data: bigint | number
    }
    'arc4UintN64Alias(uint64)uint64': {
      data: bigint | number
    }
    'arc4UintN8Alias(uint8)uint8': {
      data: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'stringReadonly(string)string': [data: string]
    'string(string)string': [data: string]
    'stringArray(string[])string[]': [data: string[]]
    'bytes(byte[])byte[]': [data: Uint8Array]
    'boolean(bool)bool': [data: boolean]
    'biguint(uint512)uint512': [data: bigint | number]
    'struct((address,uint256))(address,uint256)': [data: StructAddressUint256]
    'innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))': [data: InnerStruct]
    'PaymentTxn(pay)byte[]': [data: AppMethodCallTransactionArgument]
    'ApplicationCallTxn(appl)byte[]': [data: AppMethodCallTransactionArgument]
    'AssetTransferTxn(axfer)byte[]': [data: AppMethodCallTransactionArgument]
    'KeyRegistrationTxn(keyreg)byte[]': [data: AppMethodCallTransactionArgument]
    'Transaction(txn)byte[]': [data: AppMethodCallTransactionArgument]
    'arc4StaticBytes8(byte[8])byte[8]': [data: Uint8Array]
    'arc4StaticBytes32(byte[32])byte[32]': [data: Uint8Array]
    'arc4StaticBytes1020(byte[1020])byte[1020]': [data: Uint8Array]
    'arc4DynamicBytes(byte[])byte[]': [data: Uint8Array]
    'arc4Address(address)address': [data: string]
    'arc4Bool(bool)bool': [data: boolean]
    'arc4Byte(byte)byte': [data: number]
    'arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]': [data: [string, bigint | number][]]
    'arc4StaticArrayOf2Bytes(byte[2])byte[2]': [data: Uint8Array]
    'arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]': [data: [[string, bigint | number], [string, bigint | number]]]
    'arc4UFixed8x16(ufixed8x16)ufixed8x16': [data: number]
    'arc4UFixed512x160(ufixed512x160)ufixed512x160': [data: number]
    'arc4UintN8(uint8)uint8': [data: bigint | number]
    'arc4UintN512(uint512)uint512': [data: bigint | number]
    'arc4UintN128Alias(uint128)uint128': [data: bigint | number]
    'arc4UintN16Alias(uint16)uint16': [data: bigint | number]
    'arc4UintN256Alias(uint256)uint256': [data: bigint | number]
    'arc4UintN64Alias(uint64)uint64': [data: bigint | number]
    'arc4UintN8Alias(uint8)uint8': [data: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type AvmTypesReturns = {
  'stringReadonly(string)string': string
  'string(string)string': string
  'stringArray(string[])string[]': string[]
  'bytes(byte[])byte[]': Uint8Array
  'boolean(bool)bool': boolean
  'biguint(uint512)uint512': bigint
  'struct((address,uint256))(address,uint256)': StructAddressUint256
  'innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))': InnerStruct
  'PaymentTxn(pay)byte[]': Uint8Array
  'ApplicationCallTxn(appl)byte[]': Uint8Array
  'AssetTransferTxn(axfer)byte[]': Uint8Array
  'KeyRegistrationTxn(keyreg)byte[]': Uint8Array
  'Transaction(txn)byte[]': Uint8Array
  'arc4StaticBytes8(byte[8])byte[8]': Uint8Array
  'arc4StaticBytes32(byte[32])byte[32]': Uint8Array
  'arc4StaticBytes1020(byte[1020])byte[1020]': Uint8Array
  'arc4DynamicBytes(byte[])byte[]': Uint8Array
  'arc4Address(address)address': string
  'arc4Bool(bool)bool': boolean
  'arc4Byte(byte)byte': number
  'arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]': [string, bigint][]
  'arc4StaticArrayOf2Bytes(byte[2])byte[2]': Uint8Array
  'arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]': [[string, bigint], [string, bigint]]
  'arc4UFixed8x16(ufixed8x16)ufixed8x16': number
  'arc4UFixed512x160(ufixed512x160)ufixed512x160': number
  'arc4UintN8(uint8)uint8': number
  'arc4UintN512(uint512)uint512': bigint
  'arc4UintN128Alias(uint128)uint128': bigint
  'arc4UintN16Alias(uint16)uint16': number
  'arc4UintN256Alias(uint256)uint256': bigint
  'arc4UintN64Alias(uint64)uint64': bigint
  'arc4UintN8Alias(uint8)uint8': number
}

/**
 * Defines the types of available calls and state of the AvmTypes smart contract.
 */
export type AvmTypesTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'stringReadonly(string)string' | 'stringReadonly', {
      argsObj: AvmTypesArgs['obj']['stringReadonly(string)string']
      argsTuple: AvmTypesArgs['tuple']['stringReadonly(string)string']
      returns: AvmTypesReturns['stringReadonly(string)string']
    }>
    & Record<'string(string)string' | 'string', {
      argsObj: AvmTypesArgs['obj']['string(string)string']
      argsTuple: AvmTypesArgs['tuple']['string(string)string']
      returns: AvmTypesReturns['string(string)string']
    }>
    & Record<'stringArray(string[])string[]' | 'stringArray', {
      argsObj: AvmTypesArgs['obj']['stringArray(string[])string[]']
      argsTuple: AvmTypesArgs['tuple']['stringArray(string[])string[]']
      returns: AvmTypesReturns['stringArray(string[])string[]']
    }>
    & Record<'bytes(byte[])byte[]' | 'bytes', {
      argsObj: AvmTypesArgs['obj']['bytes(byte[])byte[]']
      argsTuple: AvmTypesArgs['tuple']['bytes(byte[])byte[]']
      returns: AvmTypesReturns['bytes(byte[])byte[]']
    }>
    & Record<'boolean(bool)bool' | 'boolean', {
      argsObj: AvmTypesArgs['obj']['boolean(bool)bool']
      argsTuple: AvmTypesArgs['tuple']['boolean(bool)bool']
      returns: AvmTypesReturns['boolean(bool)bool']
    }>
    & Record<'biguint(uint512)uint512' | 'biguint', {
      argsObj: AvmTypesArgs['obj']['biguint(uint512)uint512']
      argsTuple: AvmTypesArgs['tuple']['biguint(uint512)uint512']
      returns: AvmTypesReturns['biguint(uint512)uint512']
    }>
    & Record<'struct((address,uint256))(address,uint256)' | 'struct', {
      argsObj: AvmTypesArgs['obj']['struct((address,uint256))(address,uint256)']
      argsTuple: AvmTypesArgs['tuple']['struct((address,uint256))(address,uint256)']
      returns: AvmTypesReturns['struct((address,uint256))(address,uint256)']
    }>
    & Record<'innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))' | 'innerStruct', {
      argsObj: AvmTypesArgs['obj']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))']
      argsTuple: AvmTypesArgs['tuple']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))']
      returns: AvmTypesReturns['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))']
    }>
    & Record<'PaymentTxn(pay)byte[]' | 'PaymentTxn', {
      argsObj: AvmTypesArgs['obj']['PaymentTxn(pay)byte[]']
      argsTuple: AvmTypesArgs['tuple']['PaymentTxn(pay)byte[]']
      returns: AvmTypesReturns['PaymentTxn(pay)byte[]']
    }>
    & Record<'ApplicationCallTxn(appl)byte[]' | 'ApplicationCallTxn', {
      argsObj: AvmTypesArgs['obj']['ApplicationCallTxn(appl)byte[]']
      argsTuple: AvmTypesArgs['tuple']['ApplicationCallTxn(appl)byte[]']
      returns: AvmTypesReturns['ApplicationCallTxn(appl)byte[]']
    }>
    & Record<'AssetTransferTxn(axfer)byte[]' | 'AssetTransferTxn', {
      argsObj: AvmTypesArgs['obj']['AssetTransferTxn(axfer)byte[]']
      argsTuple: AvmTypesArgs['tuple']['AssetTransferTxn(axfer)byte[]']
      returns: AvmTypesReturns['AssetTransferTxn(axfer)byte[]']
    }>
    & Record<'KeyRegistrationTxn(keyreg)byte[]' | 'KeyRegistrationTxn', {
      argsObj: AvmTypesArgs['obj']['KeyRegistrationTxn(keyreg)byte[]']
      argsTuple: AvmTypesArgs['tuple']['KeyRegistrationTxn(keyreg)byte[]']
      returns: AvmTypesReturns['KeyRegistrationTxn(keyreg)byte[]']
    }>
    & Record<'Transaction(txn)byte[]' | 'Transaction', {
      argsObj: AvmTypesArgs['obj']['Transaction(txn)byte[]']
      argsTuple: AvmTypesArgs['tuple']['Transaction(txn)byte[]']
      returns: AvmTypesReturns['Transaction(txn)byte[]']
    }>
    & Record<'arc4StaticBytes8(byte[8])byte[8]' | 'arc4StaticBytes8', {
      argsObj: AvmTypesArgs['obj']['arc4StaticBytes8(byte[8])byte[8]']
      argsTuple: AvmTypesArgs['tuple']['arc4StaticBytes8(byte[8])byte[8]']
      returns: AvmTypesReturns['arc4StaticBytes8(byte[8])byte[8]']
    }>
    & Record<'arc4StaticBytes32(byte[32])byte[32]' | 'arc4StaticBytes32', {
      argsObj: AvmTypesArgs['obj']['arc4StaticBytes32(byte[32])byte[32]']
      argsTuple: AvmTypesArgs['tuple']['arc4StaticBytes32(byte[32])byte[32]']
      returns: AvmTypesReturns['arc4StaticBytes32(byte[32])byte[32]']
    }>
    & Record<'arc4StaticBytes1020(byte[1020])byte[1020]' | 'arc4StaticBytes1020', {
      argsObj: AvmTypesArgs['obj']['arc4StaticBytes1020(byte[1020])byte[1020]']
      argsTuple: AvmTypesArgs['tuple']['arc4StaticBytes1020(byte[1020])byte[1020]']
      returns: AvmTypesReturns['arc4StaticBytes1020(byte[1020])byte[1020]']
    }>
    & Record<'arc4DynamicBytes(byte[])byte[]' | 'arc4DynamicBytes', {
      argsObj: AvmTypesArgs['obj']['arc4DynamicBytes(byte[])byte[]']
      argsTuple: AvmTypesArgs['tuple']['arc4DynamicBytes(byte[])byte[]']
      returns: AvmTypesReturns['arc4DynamicBytes(byte[])byte[]']
    }>
    & Record<'arc4Address(address)address' | 'arc4Address', {
      argsObj: AvmTypesArgs['obj']['arc4Address(address)address']
      argsTuple: AvmTypesArgs['tuple']['arc4Address(address)address']
      returns: AvmTypesReturns['arc4Address(address)address']
    }>
    & Record<'arc4Bool(bool)bool' | 'arc4Bool', {
      argsObj: AvmTypesArgs['obj']['arc4Bool(bool)bool']
      argsTuple: AvmTypesArgs['tuple']['arc4Bool(bool)bool']
      returns: AvmTypesReturns['arc4Bool(bool)bool']
    }>
    & Record<'arc4Byte(byte)byte' | 'arc4Byte', {
      argsObj: AvmTypesArgs['obj']['arc4Byte(byte)byte']
      argsTuple: AvmTypesArgs['tuple']['arc4Byte(byte)byte']
      returns: AvmTypesReturns['arc4Byte(byte)byte']
    }>
    & Record<'arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]' | 'arc4DynamicArrayOfStruct', {
      argsObj: AvmTypesArgs['obj']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]']
      argsTuple: AvmTypesArgs['tuple']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]']
      returns: AvmTypesReturns['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]']
    }>
    & Record<'arc4StaticArrayOf2Bytes(byte[2])byte[2]' | 'arc4StaticArrayOf2Bytes', {
      argsObj: AvmTypesArgs['obj']['arc4StaticArrayOf2Bytes(byte[2])byte[2]']
      argsTuple: AvmTypesArgs['tuple']['arc4StaticArrayOf2Bytes(byte[2])byte[2]']
      returns: AvmTypesReturns['arc4StaticArrayOf2Bytes(byte[2])byte[2]']
    }>
    & Record<'arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]' | 'arc4StaticArrayOf2Structs', {
      argsObj: AvmTypesArgs['obj']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]']
      argsTuple: AvmTypesArgs['tuple']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]']
      returns: AvmTypesReturns['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]']
    }>
    & Record<'arc4UFixed8x16(ufixed8x16)ufixed8x16' | 'arc4UFixed8x16', {
      argsObj: AvmTypesArgs['obj']['arc4UFixed8x16(ufixed8x16)ufixed8x16']
      argsTuple: AvmTypesArgs['tuple']['arc4UFixed8x16(ufixed8x16)ufixed8x16']
      returns: AvmTypesReturns['arc4UFixed8x16(ufixed8x16)ufixed8x16']
    }>
    & Record<'arc4UFixed512x160(ufixed512x160)ufixed512x160' | 'arc4UFixed512x160', {
      argsObj: AvmTypesArgs['obj']['arc4UFixed512x160(ufixed512x160)ufixed512x160']
      argsTuple: AvmTypesArgs['tuple']['arc4UFixed512x160(ufixed512x160)ufixed512x160']
      returns: AvmTypesReturns['arc4UFixed512x160(ufixed512x160)ufixed512x160']
    }>
    & Record<'arc4UintN8(uint8)uint8' | 'arc4UintN8', {
      argsObj: AvmTypesArgs['obj']['arc4UintN8(uint8)uint8']
      argsTuple: AvmTypesArgs['tuple']['arc4UintN8(uint8)uint8']
      returns: AvmTypesReturns['arc4UintN8(uint8)uint8']
    }>
    & Record<'arc4UintN512(uint512)uint512' | 'arc4UintN512', {
      argsObj: AvmTypesArgs['obj']['arc4UintN512(uint512)uint512']
      argsTuple: AvmTypesArgs['tuple']['arc4UintN512(uint512)uint512']
      returns: AvmTypesReturns['arc4UintN512(uint512)uint512']
    }>
    & Record<'arc4UintN128Alias(uint128)uint128' | 'arc4UintN128Alias', {
      argsObj: AvmTypesArgs['obj']['arc4UintN128Alias(uint128)uint128']
      argsTuple: AvmTypesArgs['tuple']['arc4UintN128Alias(uint128)uint128']
      returns: AvmTypesReturns['arc4UintN128Alias(uint128)uint128']
    }>
    & Record<'arc4UintN16Alias(uint16)uint16' | 'arc4UintN16Alias', {
      argsObj: AvmTypesArgs['obj']['arc4UintN16Alias(uint16)uint16']
      argsTuple: AvmTypesArgs['tuple']['arc4UintN16Alias(uint16)uint16']
      returns: AvmTypesReturns['arc4UintN16Alias(uint16)uint16']
    }>
    & Record<'arc4UintN256Alias(uint256)uint256' | 'arc4UintN256Alias', {
      argsObj: AvmTypesArgs['obj']['arc4UintN256Alias(uint256)uint256']
      argsTuple: AvmTypesArgs['tuple']['arc4UintN256Alias(uint256)uint256']
      returns: AvmTypesReturns['arc4UintN256Alias(uint256)uint256']
    }>
    & Record<'arc4UintN64Alias(uint64)uint64' | 'arc4UintN64Alias', {
      argsObj: AvmTypesArgs['obj']['arc4UintN64Alias(uint64)uint64']
      argsTuple: AvmTypesArgs['tuple']['arc4UintN64Alias(uint64)uint64']
      returns: AvmTypesReturns['arc4UintN64Alias(uint64)uint64']
    }>
    & Record<'arc4UintN8Alias(uint8)uint8' | 'arc4UintN8Alias', {
      argsObj: AvmTypesArgs['obj']['arc4UintN8Alias(uint8)uint8']
      argsTuple: AvmTypesArgs['tuple']['arc4UintN8Alias(uint8)uint8']
      returns: AvmTypesReturns['arc4UintN8Alias(uint8)uint8']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type AvmTypesSignatures = keyof AvmTypesTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AvmTypesNonVoidMethodSignatures = keyof AvmTypesTypes['methods'] extends infer T ? T extends keyof AvmTypesTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AvmTypes smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AvmTypesSignatures> = AvmTypesTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AvmTypes smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AvmTypesSignatures> = AvmTypesTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type AvmTypesCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AvmTypesDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AvmTypesCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AvmTypes smart contract
 */
export abstract class AvmTypesParamsFactory {
  /**
   * Constructs a no op call for the stringReadonly(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stringReadonly(params: CallParams<AvmTypesArgs['obj']['stringReadonly(string)string'] | AvmTypesArgs['tuple']['stringReadonly(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stringReadonly(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the string(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static string(params: CallParams<AvmTypesArgs['obj']['string(string)string'] | AvmTypesArgs['tuple']['string(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'string(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the stringArray(string[])string[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stringArray(params: CallParams<AvmTypesArgs['obj']['stringArray(string[])string[]'] | AvmTypesArgs['tuple']['stringArray(string[])string[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stringArray(string[])string[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the bytes(byte[])byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bytes(params: CallParams<AvmTypesArgs['obj']['bytes(byte[])byte[]'] | AvmTypesArgs['tuple']['bytes(byte[])byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bytes(byte[])byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the boolean(bool)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boolean(params: CallParams<AvmTypesArgs['obj']['boolean(bool)bool'] | AvmTypesArgs['tuple']['boolean(bool)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'boolean(bool)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the biguint(uint512)uint512 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static biguint(params: CallParams<AvmTypesArgs['obj']['biguint(uint512)uint512'] | AvmTypesArgs['tuple']['biguint(uint512)uint512']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'biguint(uint512)uint512' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the struct((address,uint256))(address,uint256) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static struct(params: CallParams<AvmTypesArgs['obj']['struct((address,uint256))(address,uint256)'] | AvmTypesArgs['tuple']['struct((address,uint256))(address,uint256)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'struct((address,uint256))(address,uint256)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the innerStruct((uint64,(address,uint256)))(uint64,(address,uint256)) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static innerStruct(params: CallParams<AvmTypesArgs['obj']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))'] | AvmTypesArgs['tuple']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the PaymentTxn(pay)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static paymentTxn(params: CallParams<AvmTypesArgs['obj']['PaymentTxn(pay)byte[]'] | AvmTypesArgs['tuple']['PaymentTxn(pay)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'PaymentTxn(pay)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the ApplicationCallTxn(appl)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static applicationCallTxn(params: CallParams<AvmTypesArgs['obj']['ApplicationCallTxn(appl)byte[]'] | AvmTypesArgs['tuple']['ApplicationCallTxn(appl)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'ApplicationCallTxn(appl)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the AssetTransferTxn(axfer)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assetTransferTxn(params: CallParams<AvmTypesArgs['obj']['AssetTransferTxn(axfer)byte[]'] | AvmTypesArgs['tuple']['AssetTransferTxn(axfer)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'AssetTransferTxn(axfer)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the KeyRegistrationTxn(keyreg)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static keyRegistrationTxn(params: CallParams<AvmTypesArgs['obj']['KeyRegistrationTxn(keyreg)byte[]'] | AvmTypesArgs['tuple']['KeyRegistrationTxn(keyreg)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'KeyRegistrationTxn(keyreg)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the Transaction(txn)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transaction(params: CallParams<AvmTypesArgs['obj']['Transaction(txn)byte[]'] | AvmTypesArgs['tuple']['Transaction(txn)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'Transaction(txn)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4StaticBytes8(byte[8])byte[8] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4StaticBytes8(params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes8(byte[8])byte[8]'] | AvmTypesArgs['tuple']['arc4StaticBytes8(byte[8])byte[8]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4StaticBytes8(byte[8])byte[8]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4StaticBytes32(byte[32])byte[32] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4StaticBytes32(params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes32(byte[32])byte[32]'] | AvmTypesArgs['tuple']['arc4StaticBytes32(byte[32])byte[32]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4StaticBytes32(byte[32])byte[32]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4StaticBytes1020(byte[1020])byte[1020] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4StaticBytes1020(params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes1020(byte[1020])byte[1020]'] | AvmTypesArgs['tuple']['arc4StaticBytes1020(byte[1020])byte[1020]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4StaticBytes1020(byte[1020])byte[1020]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4DynamicBytes(byte[])byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4DynamicBytes(params: CallParams<AvmTypesArgs['obj']['arc4DynamicBytes(byte[])byte[]'] | AvmTypesArgs['tuple']['arc4DynamicBytes(byte[])byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4DynamicBytes(byte[])byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4Address(address)address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4Address(params: CallParams<AvmTypesArgs['obj']['arc4Address(address)address'] | AvmTypesArgs['tuple']['arc4Address(address)address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4Address(address)address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4Bool(bool)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4Bool(params: CallParams<AvmTypesArgs['obj']['arc4Bool(bool)bool'] | AvmTypesArgs['tuple']['arc4Bool(bool)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4Bool(bool)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4Byte(byte)byte ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4Byte(params: CallParams<AvmTypesArgs['obj']['arc4Byte(byte)byte'] | AvmTypesArgs['tuple']['arc4Byte(byte)byte']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4Byte(byte)byte' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4DynamicArrayOfStruct(params: CallParams<AvmTypesArgs['obj']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]'] | AvmTypesArgs['tuple']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4StaticArrayOf2Bytes(byte[2])byte[2] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4StaticArrayOf2Bytes(params: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Bytes(byte[2])byte[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Bytes(byte[2])byte[2]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4StaticArrayOf2Bytes(byte[2])byte[2]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4StaticArrayOf2Structs(params: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4UFixed8x16(ufixed8x16)ufixed8x16 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4UFixed8x16(params: CallParams<AvmTypesArgs['obj']['arc4UFixed8x16(ufixed8x16)ufixed8x16'] | AvmTypesArgs['tuple']['arc4UFixed8x16(ufixed8x16)ufixed8x16']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4UFixed8x16(ufixed8x16)ufixed8x16' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4UFixed512x160(ufixed512x160)ufixed512x160 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4UFixed512x160(params: CallParams<AvmTypesArgs['obj']['arc4UFixed512x160(ufixed512x160)ufixed512x160'] | AvmTypesArgs['tuple']['arc4UFixed512x160(ufixed512x160)ufixed512x160']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4UFixed512x160(ufixed512x160)ufixed512x160' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4UintN8(uint8)uint8 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4UintN8(params: CallParams<AvmTypesArgs['obj']['arc4UintN8(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8(uint8)uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4UintN8(uint8)uint8' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4UintN512(uint512)uint512 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4UintN512(params: CallParams<AvmTypesArgs['obj']['arc4UintN512(uint512)uint512'] | AvmTypesArgs['tuple']['arc4UintN512(uint512)uint512']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4UintN512(uint512)uint512' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4UintN128Alias(uint128)uint128 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4UintN128Alias(params: CallParams<AvmTypesArgs['obj']['arc4UintN128Alias(uint128)uint128'] | AvmTypesArgs['tuple']['arc4UintN128Alias(uint128)uint128']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4UintN128Alias(uint128)uint128' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4UintN16Alias(uint16)uint16 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4UintN16Alias(params: CallParams<AvmTypesArgs['obj']['arc4UintN16Alias(uint16)uint16'] | AvmTypesArgs['tuple']['arc4UintN16Alias(uint16)uint16']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4UintN16Alias(uint16)uint16' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4UintN256Alias(uint256)uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4UintN256Alias(params: CallParams<AvmTypesArgs['obj']['arc4UintN256Alias(uint256)uint256'] | AvmTypesArgs['tuple']['arc4UintN256Alias(uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4UintN256Alias(uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4UintN64Alias(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4UintN64Alias(params: CallParams<AvmTypesArgs['obj']['arc4UintN64Alias(uint64)uint64'] | AvmTypesArgs['tuple']['arc4UintN64Alias(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4UintN64Alias(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc4UintN8Alias(uint8)uint8 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc4UintN8Alias(params: CallParams<AvmTypesArgs['obj']['arc4UintN8Alias(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8Alias(uint8)uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc4UintN8Alias(uint8)uint8' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.data],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AvmTypes smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AvmTypesFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AvmTypesFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AvmTypesClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AvmTypesClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AvmTypes smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AvmTypesDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AvmTypesClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AvmTypes smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AvmTypes smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AvmTypes smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AvmTypesClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AvmTypes smart contract
 */
export class AvmTypesClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AvmTypesClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AvmTypes app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AvmTypesClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AvmTypesNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AvmTypesClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AvmTypesClient> {
    return new AvmTypesClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AvmTypesClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AvmTypesClient> {
    return new AvmTypesClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AvmTypes smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `stringReadonly(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stringReadonly: (params: CallParams<AvmTypesArgs['obj']['stringReadonly(string)string'] | AvmTypesArgs['tuple']['stringReadonly(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.stringReadonly(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `string(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    string: (params: CallParams<AvmTypesArgs['obj']['string(string)string'] | AvmTypesArgs['tuple']['string(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.string(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `stringArray(string[])string[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stringArray: (params: CallParams<AvmTypesArgs['obj']['stringArray(string[])string[]'] | AvmTypesArgs['tuple']['stringArray(string[])string[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.stringArray(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `bytes(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bytes: (params: CallParams<AvmTypesArgs['obj']['bytes(byte[])byte[]'] | AvmTypesArgs['tuple']['bytes(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.bytes(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `boolean(bool)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    boolean: (params: CallParams<AvmTypesArgs['obj']['boolean(bool)bool'] | AvmTypesArgs['tuple']['boolean(bool)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.boolean(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `biguint(uint512)uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    biguint: (params: CallParams<AvmTypesArgs['obj']['biguint(uint512)uint512'] | AvmTypesArgs['tuple']['biguint(uint512)uint512']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.biguint(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `struct((address,uint256))(address,uint256)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    struct: (params: CallParams<AvmTypesArgs['obj']['struct((address,uint256))(address,uint256)'] | AvmTypesArgs['tuple']['struct((address,uint256))(address,uint256)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.struct(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    innerStruct: (params: CallParams<AvmTypesArgs['obj']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))'] | AvmTypesArgs['tuple']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.innerStruct(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `PaymentTxn(pay)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    paymentTxn: (params: CallParams<AvmTypesArgs['obj']['PaymentTxn(pay)byte[]'] | AvmTypesArgs['tuple']['PaymentTxn(pay)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.paymentTxn(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `ApplicationCallTxn(appl)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    applicationCallTxn: (params: CallParams<AvmTypesArgs['obj']['ApplicationCallTxn(appl)byte[]'] | AvmTypesArgs['tuple']['ApplicationCallTxn(appl)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.applicationCallTxn(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `AssetTransferTxn(axfer)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assetTransferTxn: (params: CallParams<AvmTypesArgs['obj']['AssetTransferTxn(axfer)byte[]'] | AvmTypesArgs['tuple']['AssetTransferTxn(axfer)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.assetTransferTxn(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `KeyRegistrationTxn(keyreg)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    keyRegistrationTxn: (params: CallParams<AvmTypesArgs['obj']['KeyRegistrationTxn(keyreg)byte[]'] | AvmTypesArgs['tuple']['KeyRegistrationTxn(keyreg)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.keyRegistrationTxn(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `Transaction(txn)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transaction: (params: CallParams<AvmTypesArgs['obj']['Transaction(txn)byte[]'] | AvmTypesArgs['tuple']['Transaction(txn)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.transaction(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticBytes8(byte[8])byte[8]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4StaticBytes8: (params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes8(byte[8])byte[8]'] | AvmTypesArgs['tuple']['arc4StaticBytes8(byte[8])byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4StaticBytes8(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticBytes32(byte[32])byte[32]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4StaticBytes32: (params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes32(byte[32])byte[32]'] | AvmTypesArgs['tuple']['arc4StaticBytes32(byte[32])byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4StaticBytes32(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticBytes1020(byte[1020])byte[1020]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4StaticBytes1020: (params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes1020(byte[1020])byte[1020]'] | AvmTypesArgs['tuple']['arc4StaticBytes1020(byte[1020])byte[1020]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4StaticBytes1020(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4DynamicBytes(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4DynamicBytes: (params: CallParams<AvmTypesArgs['obj']['arc4DynamicBytes(byte[])byte[]'] | AvmTypesArgs['tuple']['arc4DynamicBytes(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4DynamicBytes(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4Address(address)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4Address: (params: CallParams<AvmTypesArgs['obj']['arc4Address(address)address'] | AvmTypesArgs['tuple']['arc4Address(address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4Address(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4Bool(bool)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4Bool: (params: CallParams<AvmTypesArgs['obj']['arc4Bool(bool)bool'] | AvmTypesArgs['tuple']['arc4Bool(bool)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4Bool(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4Byte(byte)byte` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4Byte: (params: CallParams<AvmTypesArgs['obj']['arc4Byte(byte)byte'] | AvmTypesArgs['tuple']['arc4Byte(byte)byte']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4Byte(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4DynamicArrayOfStruct: (params: CallParams<AvmTypesArgs['obj']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]'] | AvmTypesArgs['tuple']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4DynamicArrayOfStruct(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticArrayOf2Bytes(byte[2])byte[2]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4StaticArrayOf2Bytes: (params: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Bytes(byte[2])byte[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Bytes(byte[2])byte[2]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4StaticArrayOf2Bytes(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4StaticArrayOf2Structs: (params: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4StaticArrayOf2Structs(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UFixed8x16(ufixed8x16)ufixed8x16` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4UFixed8x16: (params: CallParams<AvmTypesArgs['obj']['arc4UFixed8x16(ufixed8x16)ufixed8x16'] | AvmTypesArgs['tuple']['arc4UFixed8x16(ufixed8x16)ufixed8x16']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4UFixed8x16(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UFixed512x160(ufixed512x160)ufixed512x160` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4UFixed512x160: (params: CallParams<AvmTypesArgs['obj']['arc4UFixed512x160(ufixed512x160)ufixed512x160'] | AvmTypesArgs['tuple']['arc4UFixed512x160(ufixed512x160)ufixed512x160']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4UFixed512x160(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN8(uint8)uint8` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4UintN8: (params: CallParams<AvmTypesArgs['obj']['arc4UintN8(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8(uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4UintN8(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN512(uint512)uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4UintN512: (params: CallParams<AvmTypesArgs['obj']['arc4UintN512(uint512)uint512'] | AvmTypesArgs['tuple']['arc4UintN512(uint512)uint512']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4UintN512(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN128Alias(uint128)uint128` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4UintN128Alias: (params: CallParams<AvmTypesArgs['obj']['arc4UintN128Alias(uint128)uint128'] | AvmTypesArgs['tuple']['arc4UintN128Alias(uint128)uint128']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4UintN128Alias(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN16Alias(uint16)uint16` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4UintN16Alias: (params: CallParams<AvmTypesArgs['obj']['arc4UintN16Alias(uint16)uint16'] | AvmTypesArgs['tuple']['arc4UintN16Alias(uint16)uint16']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4UintN16Alias(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN256Alias(uint256)uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4UintN256Alias: (params: CallParams<AvmTypesArgs['obj']['arc4UintN256Alias(uint256)uint256'] | AvmTypesArgs['tuple']['arc4UintN256Alias(uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4UintN256Alias(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN64Alias(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4UintN64Alias: (params: CallParams<AvmTypesArgs['obj']['arc4UintN64Alias(uint64)uint64'] | AvmTypesArgs['tuple']['arc4UintN64Alias(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4UintN64Alias(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN8Alias(uint8)uint8` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc4UintN8Alias: (params: CallParams<AvmTypesArgs['obj']['arc4UintN8Alias(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8Alias(uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AvmTypesParamsFactory.arc4UintN8Alias(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AvmTypes smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `stringReadonly(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stringReadonly: (params: CallParams<AvmTypesArgs['obj']['stringReadonly(string)string'] | AvmTypesArgs['tuple']['stringReadonly(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.stringReadonly(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `string(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    string: (params: CallParams<AvmTypesArgs['obj']['string(string)string'] | AvmTypesArgs['tuple']['string(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.string(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `stringArray(string[])string[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stringArray: (params: CallParams<AvmTypesArgs['obj']['stringArray(string[])string[]'] | AvmTypesArgs['tuple']['stringArray(string[])string[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.stringArray(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `bytes(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bytes: (params: CallParams<AvmTypesArgs['obj']['bytes(byte[])byte[]'] | AvmTypesArgs['tuple']['bytes(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.bytes(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `boolean(bool)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    boolean: (params: CallParams<AvmTypesArgs['obj']['boolean(bool)bool'] | AvmTypesArgs['tuple']['boolean(bool)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.boolean(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `biguint(uint512)uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    biguint: (params: CallParams<AvmTypesArgs['obj']['biguint(uint512)uint512'] | AvmTypesArgs['tuple']['biguint(uint512)uint512']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.biguint(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `struct((address,uint256))(address,uint256)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    struct: (params: CallParams<AvmTypesArgs['obj']['struct((address,uint256))(address,uint256)'] | AvmTypesArgs['tuple']['struct((address,uint256))(address,uint256)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.struct(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    innerStruct: (params: CallParams<AvmTypesArgs['obj']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))'] | AvmTypesArgs['tuple']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.innerStruct(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `PaymentTxn(pay)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    paymentTxn: (params: CallParams<AvmTypesArgs['obj']['PaymentTxn(pay)byte[]'] | AvmTypesArgs['tuple']['PaymentTxn(pay)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.paymentTxn(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `ApplicationCallTxn(appl)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    applicationCallTxn: (params: CallParams<AvmTypesArgs['obj']['ApplicationCallTxn(appl)byte[]'] | AvmTypesArgs['tuple']['ApplicationCallTxn(appl)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.applicationCallTxn(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `AssetTransferTxn(axfer)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assetTransferTxn: (params: CallParams<AvmTypesArgs['obj']['AssetTransferTxn(axfer)byte[]'] | AvmTypesArgs['tuple']['AssetTransferTxn(axfer)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.assetTransferTxn(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `KeyRegistrationTxn(keyreg)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    keyRegistrationTxn: (params: CallParams<AvmTypesArgs['obj']['KeyRegistrationTxn(keyreg)byte[]'] | AvmTypesArgs['tuple']['KeyRegistrationTxn(keyreg)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.keyRegistrationTxn(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `Transaction(txn)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transaction: (params: CallParams<AvmTypesArgs['obj']['Transaction(txn)byte[]'] | AvmTypesArgs['tuple']['Transaction(txn)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.transaction(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticBytes8(byte[8])byte[8]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4StaticBytes8: (params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes8(byte[8])byte[8]'] | AvmTypesArgs['tuple']['arc4StaticBytes8(byte[8])byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4StaticBytes8(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticBytes32(byte[32])byte[32]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4StaticBytes32: (params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes32(byte[32])byte[32]'] | AvmTypesArgs['tuple']['arc4StaticBytes32(byte[32])byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4StaticBytes32(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticBytes1020(byte[1020])byte[1020]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4StaticBytes1020: (params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes1020(byte[1020])byte[1020]'] | AvmTypesArgs['tuple']['arc4StaticBytes1020(byte[1020])byte[1020]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4StaticBytes1020(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4DynamicBytes(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4DynamicBytes: (params: CallParams<AvmTypesArgs['obj']['arc4DynamicBytes(byte[])byte[]'] | AvmTypesArgs['tuple']['arc4DynamicBytes(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4DynamicBytes(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4Address(address)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4Address: (params: CallParams<AvmTypesArgs['obj']['arc4Address(address)address'] | AvmTypesArgs['tuple']['arc4Address(address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4Address(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4Bool(bool)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4Bool: (params: CallParams<AvmTypesArgs['obj']['arc4Bool(bool)bool'] | AvmTypesArgs['tuple']['arc4Bool(bool)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4Bool(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4Byte(byte)byte` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4Byte: (params: CallParams<AvmTypesArgs['obj']['arc4Byte(byte)byte'] | AvmTypesArgs['tuple']['arc4Byte(byte)byte']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4Byte(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4DynamicArrayOfStruct: (params: CallParams<AvmTypesArgs['obj']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]'] | AvmTypesArgs['tuple']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4DynamicArrayOfStruct(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticArrayOf2Bytes(byte[2])byte[2]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4StaticArrayOf2Bytes: (params: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Bytes(byte[2])byte[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Bytes(byte[2])byte[2]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4StaticArrayOf2Bytes(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4StaticArrayOf2Structs: (params: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4StaticArrayOf2Structs(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UFixed8x16(ufixed8x16)ufixed8x16` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4UFixed8x16: (params: CallParams<AvmTypesArgs['obj']['arc4UFixed8x16(ufixed8x16)ufixed8x16'] | AvmTypesArgs['tuple']['arc4UFixed8x16(ufixed8x16)ufixed8x16']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4UFixed8x16(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UFixed512x160(ufixed512x160)ufixed512x160` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4UFixed512x160: (params: CallParams<AvmTypesArgs['obj']['arc4UFixed512x160(ufixed512x160)ufixed512x160'] | AvmTypesArgs['tuple']['arc4UFixed512x160(ufixed512x160)ufixed512x160']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4UFixed512x160(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN8(uint8)uint8` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4UintN8: (params: CallParams<AvmTypesArgs['obj']['arc4UintN8(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8(uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4UintN8(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN512(uint512)uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4UintN512: (params: CallParams<AvmTypesArgs['obj']['arc4UintN512(uint512)uint512'] | AvmTypesArgs['tuple']['arc4UintN512(uint512)uint512']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4UintN512(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN128Alias(uint128)uint128` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4UintN128Alias: (params: CallParams<AvmTypesArgs['obj']['arc4UintN128Alias(uint128)uint128'] | AvmTypesArgs['tuple']['arc4UintN128Alias(uint128)uint128']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4UintN128Alias(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN16Alias(uint16)uint16` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4UintN16Alias: (params: CallParams<AvmTypesArgs['obj']['arc4UintN16Alias(uint16)uint16'] | AvmTypesArgs['tuple']['arc4UintN16Alias(uint16)uint16']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4UintN16Alias(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN256Alias(uint256)uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4UintN256Alias: (params: CallParams<AvmTypesArgs['obj']['arc4UintN256Alias(uint256)uint256'] | AvmTypesArgs['tuple']['arc4UintN256Alias(uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4UintN256Alias(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN64Alias(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4UintN64Alias: (params: CallParams<AvmTypesArgs['obj']['arc4UintN64Alias(uint64)uint64'] | AvmTypesArgs['tuple']['arc4UintN64Alias(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4UintN64Alias(params))
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN8Alias(uint8)uint8` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc4UintN8Alias: (params: CallParams<AvmTypesArgs['obj']['arc4UintN8Alias(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8Alias(uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AvmTypesParamsFactory.arc4UintN8Alias(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AvmTypes smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `stringReadonly(string)string` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stringReadonly: async (params: CallParams<AvmTypesArgs['obj']['stringReadonly(string)string'] | AvmTypesArgs['tuple']['stringReadonly(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.stringReadonly(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['stringReadonly(string)string'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `string(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    string: async (params: CallParams<AvmTypesArgs['obj']['string(string)string'] | AvmTypesArgs['tuple']['string(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.string(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['string(string)string'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `stringArray(string[])string[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stringArray: async (params: CallParams<AvmTypesArgs['obj']['stringArray(string[])string[]'] | AvmTypesArgs['tuple']['stringArray(string[])string[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.stringArray(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['stringArray(string[])string[]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `bytes(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bytes: async (params: CallParams<AvmTypesArgs['obj']['bytes(byte[])byte[]'] | AvmTypesArgs['tuple']['bytes(byte[])byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.bytes(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['bytes(byte[])byte[]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `boolean(bool)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    boolean: async (params: CallParams<AvmTypesArgs['obj']['boolean(bool)bool'] | AvmTypesArgs['tuple']['boolean(bool)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.boolean(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['boolean(bool)bool'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `biguint(uint512)uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    biguint: async (params: CallParams<AvmTypesArgs['obj']['biguint(uint512)uint512'] | AvmTypesArgs['tuple']['biguint(uint512)uint512']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.biguint(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['biguint(uint512)uint512'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `struct((address,uint256))(address,uint256)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    struct: async (params: CallParams<AvmTypesArgs['obj']['struct((address,uint256))(address,uint256)'] | AvmTypesArgs['tuple']['struct((address,uint256))(address,uint256)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.struct(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['struct((address,uint256))(address,uint256)'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    innerStruct: async (params: CallParams<AvmTypesArgs['obj']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))'] | AvmTypesArgs['tuple']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.innerStruct(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `PaymentTxn(pay)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    paymentTxn: async (params: CallParams<AvmTypesArgs['obj']['PaymentTxn(pay)byte[]'] | AvmTypesArgs['tuple']['PaymentTxn(pay)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.paymentTxn(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['PaymentTxn(pay)byte[]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `ApplicationCallTxn(appl)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    applicationCallTxn: async (params: CallParams<AvmTypesArgs['obj']['ApplicationCallTxn(appl)byte[]'] | AvmTypesArgs['tuple']['ApplicationCallTxn(appl)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.applicationCallTxn(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['ApplicationCallTxn(appl)byte[]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `AssetTransferTxn(axfer)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assetTransferTxn: async (params: CallParams<AvmTypesArgs['obj']['AssetTransferTxn(axfer)byte[]'] | AvmTypesArgs['tuple']['AssetTransferTxn(axfer)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.assetTransferTxn(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['AssetTransferTxn(axfer)byte[]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `KeyRegistrationTxn(keyreg)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    keyRegistrationTxn: async (params: CallParams<AvmTypesArgs['obj']['KeyRegistrationTxn(keyreg)byte[]'] | AvmTypesArgs['tuple']['KeyRegistrationTxn(keyreg)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.keyRegistrationTxn(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['KeyRegistrationTxn(keyreg)byte[]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `Transaction(txn)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transaction: async (params: CallParams<AvmTypesArgs['obj']['Transaction(txn)byte[]'] | AvmTypesArgs['tuple']['Transaction(txn)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.transaction(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['Transaction(txn)byte[]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticBytes8(byte[8])byte[8]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4StaticBytes8: async (params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes8(byte[8])byte[8]'] | AvmTypesArgs['tuple']['arc4StaticBytes8(byte[8])byte[8]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4StaticBytes8(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4StaticBytes8(byte[8])byte[8]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticBytes32(byte[32])byte[32]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4StaticBytes32: async (params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes32(byte[32])byte[32]'] | AvmTypesArgs['tuple']['arc4StaticBytes32(byte[32])byte[32]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4StaticBytes32(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4StaticBytes32(byte[32])byte[32]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticBytes1020(byte[1020])byte[1020]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4StaticBytes1020: async (params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes1020(byte[1020])byte[1020]'] | AvmTypesArgs['tuple']['arc4StaticBytes1020(byte[1020])byte[1020]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4StaticBytes1020(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4StaticBytes1020(byte[1020])byte[1020]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4DynamicBytes(byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4DynamicBytes: async (params: CallParams<AvmTypesArgs['obj']['arc4DynamicBytes(byte[])byte[]'] | AvmTypesArgs['tuple']['arc4DynamicBytes(byte[])byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4DynamicBytes(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4DynamicBytes(byte[])byte[]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4Address(address)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4Address: async (params: CallParams<AvmTypesArgs['obj']['arc4Address(address)address'] | AvmTypesArgs['tuple']['arc4Address(address)address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4Address(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4Address(address)address'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4Bool(bool)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4Bool: async (params: CallParams<AvmTypesArgs['obj']['arc4Bool(bool)bool'] | AvmTypesArgs['tuple']['arc4Bool(bool)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4Bool(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4Bool(bool)bool'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4Byte(byte)byte` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4Byte: async (params: CallParams<AvmTypesArgs['obj']['arc4Byte(byte)byte'] | AvmTypesArgs['tuple']['arc4Byte(byte)byte']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4Byte(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4Byte(byte)byte'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4DynamicArrayOfStruct: async (params: CallParams<AvmTypesArgs['obj']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]'] | AvmTypesArgs['tuple']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4DynamicArrayOfStruct(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticArrayOf2Bytes(byte[2])byte[2]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4StaticArrayOf2Bytes: async (params: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Bytes(byte[2])byte[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Bytes(byte[2])byte[2]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4StaticArrayOf2Bytes(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4StaticArrayOf2Bytes(byte[2])byte[2]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4StaticArrayOf2Structs: async (params: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4StaticArrayOf2Structs(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UFixed8x16(ufixed8x16)ufixed8x16` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4UFixed8x16: async (params: CallParams<AvmTypesArgs['obj']['arc4UFixed8x16(ufixed8x16)ufixed8x16'] | AvmTypesArgs['tuple']['arc4UFixed8x16(ufixed8x16)ufixed8x16']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4UFixed8x16(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4UFixed8x16(ufixed8x16)ufixed8x16'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UFixed512x160(ufixed512x160)ufixed512x160` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4UFixed512x160: async (params: CallParams<AvmTypesArgs['obj']['arc4UFixed512x160(ufixed512x160)ufixed512x160'] | AvmTypesArgs['tuple']['arc4UFixed512x160(ufixed512x160)ufixed512x160']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4UFixed512x160(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4UFixed512x160(ufixed512x160)ufixed512x160'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN8(uint8)uint8` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4UintN8: async (params: CallParams<AvmTypesArgs['obj']['arc4UintN8(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8(uint8)uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4UintN8(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4UintN8(uint8)uint8'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN512(uint512)uint512` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4UintN512: async (params: CallParams<AvmTypesArgs['obj']['arc4UintN512(uint512)uint512'] | AvmTypesArgs['tuple']['arc4UintN512(uint512)uint512']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4UintN512(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4UintN512(uint512)uint512'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN128Alias(uint128)uint128` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4UintN128Alias: async (params: CallParams<AvmTypesArgs['obj']['arc4UintN128Alias(uint128)uint128'] | AvmTypesArgs['tuple']['arc4UintN128Alias(uint128)uint128']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4UintN128Alias(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4UintN128Alias(uint128)uint128'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN16Alias(uint16)uint16` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4UintN16Alias: async (params: CallParams<AvmTypesArgs['obj']['arc4UintN16Alias(uint16)uint16'] | AvmTypesArgs['tuple']['arc4UintN16Alias(uint16)uint16']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4UintN16Alias(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4UintN16Alias(uint16)uint16'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN256Alias(uint256)uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4UintN256Alias: async (params: CallParams<AvmTypesArgs['obj']['arc4UintN256Alias(uint256)uint256'] | AvmTypesArgs['tuple']['arc4UintN256Alias(uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4UintN256Alias(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4UintN256Alias(uint256)uint256'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN64Alias(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4UintN64Alias: async (params: CallParams<AvmTypesArgs['obj']['arc4UintN64Alias(uint64)uint64'] | AvmTypesArgs['tuple']['arc4UintN64Alias(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4UintN64Alias(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4UintN64Alias(uint64)uint64'])}
    },

    /**
     * Makes a call to the AvmTypes smart contract using the `arc4UintN8Alias(uint8)uint8` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc4UintN8Alias: async (params: CallParams<AvmTypesArgs['obj']['arc4UintN8Alias(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8Alias(uint8)uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AvmTypesParamsFactory.arc4UintN8Alias(params))
      return {...result, return: result.return as unknown as (undefined | AvmTypesReturns['arc4UintN8Alias(uint8)uint8'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AvmTypesClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AvmTypes smart contract using the `stringReadonly(string)string` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async stringReadonly(params: CallParams<AvmTypesArgs['obj']['stringReadonly(string)string'] | AvmTypesArgs['tuple']['stringReadonly(string)string']>) {
    const result = await this.appClient.send.call(AvmTypesParamsFactory.stringReadonly(params))
    return result.return as unknown as AvmTypesReturns['stringReadonly(string)string']
  }

  /**
   * Methods to access state for the current AvmTypes app
   */
  state = {
  }

  public newGroup(): AvmTypesComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a stringReadonly(string)string method call against the AvmTypes contract
       */
      stringReadonly(params: CallParams<AvmTypesArgs['obj']['stringReadonly(string)string'] | AvmTypesArgs['tuple']['stringReadonly(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stringReadonly(params)))
        resultMappers.push((v) => client.decodeReturnValue('stringReadonly(string)string', v))
        return this
      },
      /**
       * Add a string(string)string method call against the AvmTypes contract
       */
      string(params: CallParams<AvmTypesArgs['obj']['string(string)string'] | AvmTypesArgs['tuple']['string(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.string(params)))
        resultMappers.push((v) => client.decodeReturnValue('string(string)string', v))
        return this
      },
      /**
       * Add a stringArray(string[])string[] method call against the AvmTypes contract
       */
      stringArray(params: CallParams<AvmTypesArgs['obj']['stringArray(string[])string[]'] | AvmTypesArgs['tuple']['stringArray(string[])string[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stringArray(params)))
        resultMappers.push((v) => client.decodeReturnValue('stringArray(string[])string[]', v))
        return this
      },
      /**
       * Add a bytes(byte[])byte[] method call against the AvmTypes contract
       */
      bytes(params: CallParams<AvmTypesArgs['obj']['bytes(byte[])byte[]'] | AvmTypesArgs['tuple']['bytes(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bytes(params)))
        resultMappers.push((v) => client.decodeReturnValue('bytes(byte[])byte[]', v))
        return this
      },
      /**
       * Add a boolean(bool)bool method call against the AvmTypes contract
       */
      boolean(params: CallParams<AvmTypesArgs['obj']['boolean(bool)bool'] | AvmTypesArgs['tuple']['boolean(bool)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boolean(params)))
        resultMappers.push((v) => client.decodeReturnValue('boolean(bool)bool', v))
        return this
      },
      /**
       * Add a biguint(uint512)uint512 method call against the AvmTypes contract
       */
      biguint(params: CallParams<AvmTypesArgs['obj']['biguint(uint512)uint512'] | AvmTypesArgs['tuple']['biguint(uint512)uint512']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.biguint(params)))
        resultMappers.push((v) => client.decodeReturnValue('biguint(uint512)uint512', v))
        return this
      },
      /**
       * Add a struct((address,uint256))(address,uint256) method call against the AvmTypes contract
       */
      struct(params: CallParams<AvmTypesArgs['obj']['struct((address,uint256))(address,uint256)'] | AvmTypesArgs['tuple']['struct((address,uint256))(address,uint256)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.struct(params)))
        resultMappers.push((v) => client.decodeReturnValue('struct((address,uint256))(address,uint256)', v))
        return this
      },
      /**
       * Add a innerStruct((uint64,(address,uint256)))(uint64,(address,uint256)) method call against the AvmTypes contract
       */
      innerStruct(params: CallParams<AvmTypesArgs['obj']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))'] | AvmTypesArgs['tuple']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.innerStruct(params)))
        resultMappers.push((v) => client.decodeReturnValue('innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))', v))
        return this
      },
      /**
       * Add a PaymentTxn(pay)byte[] method call against the AvmTypes contract
       */
      paymentTxn(params: CallParams<AvmTypesArgs['obj']['PaymentTxn(pay)byte[]'] | AvmTypesArgs['tuple']['PaymentTxn(pay)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.paymentTxn(params)))
        resultMappers.push((v) => client.decodeReturnValue('PaymentTxn(pay)byte[]', v))
        return this
      },
      /**
       * Add a ApplicationCallTxn(appl)byte[] method call against the AvmTypes contract
       */
      applicationCallTxn(params: CallParams<AvmTypesArgs['obj']['ApplicationCallTxn(appl)byte[]'] | AvmTypesArgs['tuple']['ApplicationCallTxn(appl)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.applicationCallTxn(params)))
        resultMappers.push((v) => client.decodeReturnValue('ApplicationCallTxn(appl)byte[]', v))
        return this
      },
      /**
       * Add a AssetTransferTxn(axfer)byte[] method call against the AvmTypes contract
       */
      assetTransferTxn(params: CallParams<AvmTypesArgs['obj']['AssetTransferTxn(axfer)byte[]'] | AvmTypesArgs['tuple']['AssetTransferTxn(axfer)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assetTransferTxn(params)))
        resultMappers.push((v) => client.decodeReturnValue('AssetTransferTxn(axfer)byte[]', v))
        return this
      },
      /**
       * Add a KeyRegistrationTxn(keyreg)byte[] method call against the AvmTypes contract
       */
      keyRegistrationTxn(params: CallParams<AvmTypesArgs['obj']['KeyRegistrationTxn(keyreg)byte[]'] | AvmTypesArgs['tuple']['KeyRegistrationTxn(keyreg)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.keyRegistrationTxn(params)))
        resultMappers.push((v) => client.decodeReturnValue('KeyRegistrationTxn(keyreg)byte[]', v))
        return this
      },
      /**
       * Add a Transaction(txn)byte[] method call against the AvmTypes contract
       */
      transaction(params: CallParams<AvmTypesArgs['obj']['Transaction(txn)byte[]'] | AvmTypesArgs['tuple']['Transaction(txn)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transaction(params)))
        resultMappers.push((v) => client.decodeReturnValue('Transaction(txn)byte[]', v))
        return this
      },
      /**
       * Add a arc4StaticBytes8(byte[8])byte[8] method call against the AvmTypes contract
       */
      arc4StaticBytes8(params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes8(byte[8])byte[8]'] | AvmTypesArgs['tuple']['arc4StaticBytes8(byte[8])byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4StaticBytes8(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4StaticBytes8(byte[8])byte[8]', v))
        return this
      },
      /**
       * Add a arc4StaticBytes32(byte[32])byte[32] method call against the AvmTypes contract
       */
      arc4StaticBytes32(params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes32(byte[32])byte[32]'] | AvmTypesArgs['tuple']['arc4StaticBytes32(byte[32])byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4StaticBytes32(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4StaticBytes32(byte[32])byte[32]', v))
        return this
      },
      /**
       * Add a arc4StaticBytes1020(byte[1020])byte[1020] method call against the AvmTypes contract
       */
      arc4StaticBytes1020(params: CallParams<AvmTypesArgs['obj']['arc4StaticBytes1020(byte[1020])byte[1020]'] | AvmTypesArgs['tuple']['arc4StaticBytes1020(byte[1020])byte[1020]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4StaticBytes1020(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4StaticBytes1020(byte[1020])byte[1020]', v))
        return this
      },
      /**
       * Add a arc4DynamicBytes(byte[])byte[] method call against the AvmTypes contract
       */
      arc4DynamicBytes(params: CallParams<AvmTypesArgs['obj']['arc4DynamicBytes(byte[])byte[]'] | AvmTypesArgs['tuple']['arc4DynamicBytes(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4DynamicBytes(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4DynamicBytes(byte[])byte[]', v))
        return this
      },
      /**
       * Add a arc4Address(address)address method call against the AvmTypes contract
       */
      arc4Address(params: CallParams<AvmTypesArgs['obj']['arc4Address(address)address'] | AvmTypesArgs['tuple']['arc4Address(address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4Address(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4Address(address)address', v))
        return this
      },
      /**
       * Add a arc4Bool(bool)bool method call against the AvmTypes contract
       */
      arc4Bool(params: CallParams<AvmTypesArgs['obj']['arc4Bool(bool)bool'] | AvmTypesArgs['tuple']['arc4Bool(bool)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4Bool(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4Bool(bool)bool', v))
        return this
      },
      /**
       * Add a arc4Byte(byte)byte method call against the AvmTypes contract
       */
      arc4Byte(params: CallParams<AvmTypesArgs['obj']['arc4Byte(byte)byte'] | AvmTypesArgs['tuple']['arc4Byte(byte)byte']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4Byte(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4Byte(byte)byte', v))
        return this
      },
      /**
       * Add a arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[] method call against the AvmTypes contract
       */
      arc4DynamicArrayOfStruct(params: CallParams<AvmTypesArgs['obj']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]'] | AvmTypesArgs['tuple']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4DynamicArrayOfStruct(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]', v))
        return this
      },
      /**
       * Add a arc4StaticArrayOf2Bytes(byte[2])byte[2] method call against the AvmTypes contract
       */
      arc4StaticArrayOf2Bytes(params: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Bytes(byte[2])byte[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Bytes(byte[2])byte[2]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4StaticArrayOf2Bytes(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4StaticArrayOf2Bytes(byte[2])byte[2]', v))
        return this
      },
      /**
       * Add a arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2] method call against the AvmTypes contract
       */
      arc4StaticArrayOf2Structs(params: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4StaticArrayOf2Structs(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]', v))
        return this
      },
      /**
       * Add a arc4UFixed8x16(ufixed8x16)ufixed8x16 method call against the AvmTypes contract
       */
      arc4UFixed8x16(params: CallParams<AvmTypesArgs['obj']['arc4UFixed8x16(ufixed8x16)ufixed8x16'] | AvmTypesArgs['tuple']['arc4UFixed8x16(ufixed8x16)ufixed8x16']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4UFixed8x16(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4UFixed8x16(ufixed8x16)ufixed8x16', v))
        return this
      },
      /**
       * Add a arc4UFixed512x160(ufixed512x160)ufixed512x160 method call against the AvmTypes contract
       */
      arc4UFixed512x160(params: CallParams<AvmTypesArgs['obj']['arc4UFixed512x160(ufixed512x160)ufixed512x160'] | AvmTypesArgs['tuple']['arc4UFixed512x160(ufixed512x160)ufixed512x160']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4UFixed512x160(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4UFixed512x160(ufixed512x160)ufixed512x160', v))
        return this
      },
      /**
       * Add a arc4UintN8(uint8)uint8 method call against the AvmTypes contract
       */
      arc4UintN8(params: CallParams<AvmTypesArgs['obj']['arc4UintN8(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8(uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4UintN8(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4UintN8(uint8)uint8', v))
        return this
      },
      /**
       * Add a arc4UintN512(uint512)uint512 method call against the AvmTypes contract
       */
      arc4UintN512(params: CallParams<AvmTypesArgs['obj']['arc4UintN512(uint512)uint512'] | AvmTypesArgs['tuple']['arc4UintN512(uint512)uint512']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4UintN512(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4UintN512(uint512)uint512', v))
        return this
      },
      /**
       * Add a arc4UintN128Alias(uint128)uint128 method call against the AvmTypes contract
       */
      arc4UintN128Alias(params: CallParams<AvmTypesArgs['obj']['arc4UintN128Alias(uint128)uint128'] | AvmTypesArgs['tuple']['arc4UintN128Alias(uint128)uint128']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4UintN128Alias(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4UintN128Alias(uint128)uint128', v))
        return this
      },
      /**
       * Add a arc4UintN16Alias(uint16)uint16 method call against the AvmTypes contract
       */
      arc4UintN16Alias(params: CallParams<AvmTypesArgs['obj']['arc4UintN16Alias(uint16)uint16'] | AvmTypesArgs['tuple']['arc4UintN16Alias(uint16)uint16']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4UintN16Alias(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4UintN16Alias(uint16)uint16', v))
        return this
      },
      /**
       * Add a arc4UintN256Alias(uint256)uint256 method call against the AvmTypes contract
       */
      arc4UintN256Alias(params: CallParams<AvmTypesArgs['obj']['arc4UintN256Alias(uint256)uint256'] | AvmTypesArgs['tuple']['arc4UintN256Alias(uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4UintN256Alias(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4UintN256Alias(uint256)uint256', v))
        return this
      },
      /**
       * Add a arc4UintN64Alias(uint64)uint64 method call against the AvmTypes contract
       */
      arc4UintN64Alias(params: CallParams<AvmTypesArgs['obj']['arc4UintN64Alias(uint64)uint64'] | AvmTypesArgs['tuple']['arc4UintN64Alias(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4UintN64Alias(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4UintN64Alias(uint64)uint64', v))
        return this
      },
      /**
       * Add a arc4UintN8Alias(uint8)uint8 method call against the AvmTypes contract
       */
      arc4UintN8Alias(params: CallParams<AvmTypesArgs['obj']['arc4UintN8Alias(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8Alias(uint8)uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc4UintN8Alias(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc4UintN8Alias(uint8)uint8', v))
        return this
      },
      /**
       * Add a clear state call to the AvmTypes contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AvmTypesComposer
  }
}
export type AvmTypesComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the stringReadonly(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stringReadonly(params?: CallParams<AvmTypesArgs['obj']['stringReadonly(string)string'] | AvmTypesArgs['tuple']['stringReadonly(string)string']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['stringReadonly(string)string'] | undefined]>

  /**
   * Calls the string(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  string(params?: CallParams<AvmTypesArgs['obj']['string(string)string'] | AvmTypesArgs['tuple']['string(string)string']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['string(string)string'] | undefined]>

  /**
   * Calls the stringArray(string[])string[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stringArray(params?: CallParams<AvmTypesArgs['obj']['stringArray(string[])string[]'] | AvmTypesArgs['tuple']['stringArray(string[])string[]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['stringArray(string[])string[]'] | undefined]>

  /**
   * Calls the bytes(byte[])byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bytes(params?: CallParams<AvmTypesArgs['obj']['bytes(byte[])byte[]'] | AvmTypesArgs['tuple']['bytes(byte[])byte[]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['bytes(byte[])byte[]'] | undefined]>

  /**
   * Calls the boolean(bool)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boolean(params?: CallParams<AvmTypesArgs['obj']['boolean(bool)bool'] | AvmTypesArgs['tuple']['boolean(bool)bool']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['boolean(bool)bool'] | undefined]>

  /**
   * Calls the biguint(uint512)uint512 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  biguint(params?: CallParams<AvmTypesArgs['obj']['biguint(uint512)uint512'] | AvmTypesArgs['tuple']['biguint(uint512)uint512']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['biguint(uint512)uint512'] | undefined]>

  /**
   * Calls the struct((address,uint256))(address,uint256) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  struct(params?: CallParams<AvmTypesArgs['obj']['struct((address,uint256))(address,uint256)'] | AvmTypesArgs['tuple']['struct((address,uint256))(address,uint256)']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['struct((address,uint256))(address,uint256)'] | undefined]>

  /**
   * Calls the innerStruct((uint64,(address,uint256)))(uint64,(address,uint256)) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  innerStruct(params?: CallParams<AvmTypesArgs['obj']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))'] | AvmTypesArgs['tuple']['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['innerStruct((uint64,(address,uint256)))(uint64,(address,uint256))'] | undefined]>

  /**
   * Calls the PaymentTxn(pay)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  paymentTxn(params?: CallParams<AvmTypesArgs['obj']['PaymentTxn(pay)byte[]'] | AvmTypesArgs['tuple']['PaymentTxn(pay)byte[]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['PaymentTxn(pay)byte[]'] | undefined]>

  /**
   * Calls the ApplicationCallTxn(appl)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  applicationCallTxn(params?: CallParams<AvmTypesArgs['obj']['ApplicationCallTxn(appl)byte[]'] | AvmTypesArgs['tuple']['ApplicationCallTxn(appl)byte[]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['ApplicationCallTxn(appl)byte[]'] | undefined]>

  /**
   * Calls the AssetTransferTxn(axfer)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetTransferTxn(params?: CallParams<AvmTypesArgs['obj']['AssetTransferTxn(axfer)byte[]'] | AvmTypesArgs['tuple']['AssetTransferTxn(axfer)byte[]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['AssetTransferTxn(axfer)byte[]'] | undefined]>

  /**
   * Calls the KeyRegistrationTxn(keyreg)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keyRegistrationTxn(params?: CallParams<AvmTypesArgs['obj']['KeyRegistrationTxn(keyreg)byte[]'] | AvmTypesArgs['tuple']['KeyRegistrationTxn(keyreg)byte[]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['KeyRegistrationTxn(keyreg)byte[]'] | undefined]>

  /**
   * Calls the Transaction(txn)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transaction(params?: CallParams<AvmTypesArgs['obj']['Transaction(txn)byte[]'] | AvmTypesArgs['tuple']['Transaction(txn)byte[]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['Transaction(txn)byte[]'] | undefined]>

  /**
   * Calls the arc4StaticBytes8(byte[8])byte[8] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4StaticBytes8(params?: CallParams<AvmTypesArgs['obj']['arc4StaticBytes8(byte[8])byte[8]'] | AvmTypesArgs['tuple']['arc4StaticBytes8(byte[8])byte[8]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4StaticBytes8(byte[8])byte[8]'] | undefined]>

  /**
   * Calls the arc4StaticBytes32(byte[32])byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4StaticBytes32(params?: CallParams<AvmTypesArgs['obj']['arc4StaticBytes32(byte[32])byte[32]'] | AvmTypesArgs['tuple']['arc4StaticBytes32(byte[32])byte[32]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4StaticBytes32(byte[32])byte[32]'] | undefined]>

  /**
   * Calls the arc4StaticBytes1020(byte[1020])byte[1020] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4StaticBytes1020(params?: CallParams<AvmTypesArgs['obj']['arc4StaticBytes1020(byte[1020])byte[1020]'] | AvmTypesArgs['tuple']['arc4StaticBytes1020(byte[1020])byte[1020]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4StaticBytes1020(byte[1020])byte[1020]'] | undefined]>

  /**
   * Calls the arc4DynamicBytes(byte[])byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4DynamicBytes(params?: CallParams<AvmTypesArgs['obj']['arc4DynamicBytes(byte[])byte[]'] | AvmTypesArgs['tuple']['arc4DynamicBytes(byte[])byte[]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4DynamicBytes(byte[])byte[]'] | undefined]>

  /**
   * Calls the arc4Address(address)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4Address(params?: CallParams<AvmTypesArgs['obj']['arc4Address(address)address'] | AvmTypesArgs['tuple']['arc4Address(address)address']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4Address(address)address'] | undefined]>

  /**
   * Calls the arc4Bool(bool)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4Bool(params?: CallParams<AvmTypesArgs['obj']['arc4Bool(bool)bool'] | AvmTypesArgs['tuple']['arc4Bool(bool)bool']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4Bool(bool)bool'] | undefined]>

  /**
   * Calls the arc4Byte(byte)byte ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4Byte(params?: CallParams<AvmTypesArgs['obj']['arc4Byte(byte)byte'] | AvmTypesArgs['tuple']['arc4Byte(byte)byte']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4Byte(byte)byte'] | undefined]>

  /**
   * Calls the arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4DynamicArrayOfStruct(params?: CallParams<AvmTypesArgs['obj']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]'] | AvmTypesArgs['tuple']['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4DynamicArrayOfStruct((address,uint256)[])(address,uint256)[]'] | undefined]>

  /**
   * Calls the arc4StaticArrayOf2Bytes(byte[2])byte[2] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4StaticArrayOf2Bytes(params?: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Bytes(byte[2])byte[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Bytes(byte[2])byte[2]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4StaticArrayOf2Bytes(byte[2])byte[2]'] | undefined]>

  /**
   * Calls the arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4StaticArrayOf2Structs(params?: CallParams<AvmTypesArgs['obj']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]'] | AvmTypesArgs['tuple']['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4StaticArrayOf2Structs((address,uint256)[2])(address,uint256)[2]'] | undefined]>

  /**
   * Calls the arc4UFixed8x16(ufixed8x16)ufixed8x16 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4UFixed8x16(params?: CallParams<AvmTypesArgs['obj']['arc4UFixed8x16(ufixed8x16)ufixed8x16'] | AvmTypesArgs['tuple']['arc4UFixed8x16(ufixed8x16)ufixed8x16']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4UFixed8x16(ufixed8x16)ufixed8x16'] | undefined]>

  /**
   * Calls the arc4UFixed512x160(ufixed512x160)ufixed512x160 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4UFixed512x160(params?: CallParams<AvmTypesArgs['obj']['arc4UFixed512x160(ufixed512x160)ufixed512x160'] | AvmTypesArgs['tuple']['arc4UFixed512x160(ufixed512x160)ufixed512x160']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4UFixed512x160(ufixed512x160)ufixed512x160'] | undefined]>

  /**
   * Calls the arc4UintN8(uint8)uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4UintN8(params?: CallParams<AvmTypesArgs['obj']['arc4UintN8(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8(uint8)uint8']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4UintN8(uint8)uint8'] | undefined]>

  /**
   * Calls the arc4UintN512(uint512)uint512 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4UintN512(params?: CallParams<AvmTypesArgs['obj']['arc4UintN512(uint512)uint512'] | AvmTypesArgs['tuple']['arc4UintN512(uint512)uint512']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4UintN512(uint512)uint512'] | undefined]>

  /**
   * Calls the arc4UintN128Alias(uint128)uint128 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4UintN128Alias(params?: CallParams<AvmTypesArgs['obj']['arc4UintN128Alias(uint128)uint128'] | AvmTypesArgs['tuple']['arc4UintN128Alias(uint128)uint128']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4UintN128Alias(uint128)uint128'] | undefined]>

  /**
   * Calls the arc4UintN16Alias(uint16)uint16 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4UintN16Alias(params?: CallParams<AvmTypesArgs['obj']['arc4UintN16Alias(uint16)uint16'] | AvmTypesArgs['tuple']['arc4UintN16Alias(uint16)uint16']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4UintN16Alias(uint16)uint16'] | undefined]>

  /**
   * Calls the arc4UintN256Alias(uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4UintN256Alias(params?: CallParams<AvmTypesArgs['obj']['arc4UintN256Alias(uint256)uint256'] | AvmTypesArgs['tuple']['arc4UintN256Alias(uint256)uint256']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4UintN256Alias(uint256)uint256'] | undefined]>

  /**
   * Calls the arc4UintN64Alias(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4UintN64Alias(params?: CallParams<AvmTypesArgs['obj']['arc4UintN64Alias(uint64)uint64'] | AvmTypesArgs['tuple']['arc4UintN64Alias(uint64)uint64']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4UintN64Alias(uint64)uint64'] | undefined]>

  /**
   * Calls the arc4UintN8Alias(uint8)uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc4UintN8Alias(params?: CallParams<AvmTypesArgs['obj']['arc4UintN8Alias(uint8)uint8'] | AvmTypesArgs['tuple']['arc4UintN8Alias(uint8)uint8']>): AvmTypesComposer<[...TReturns, AvmTypesReturns['arc4UintN8Alias(uint8)uint8'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AvmTypes smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AvmTypesComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AvmTypesComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AvmTypesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AvmTypesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AvmTypesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AvmTypesComposerResults<TReturns>>
}
export type AvmTypesComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

